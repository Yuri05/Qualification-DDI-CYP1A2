name: Check Latest Model Releases

on:
  push:
#    paths:
#      - 'Qualification/Input/qualification_plan.json'
  pull_request:
#    paths:
#      - 'Qualification/Input/qualification_plan.json'

jobs:
  check-latest-releases:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: python -m pip install requests

      - name: Check project releases
        env:
          QUAL_PLAN: Qualification/Input/qualification_plan.json
        run: |
          cat <<EOF > check_releases.py
import json
import re
import requests
import sys

with open("${{ env.QUAL_PLAN }}", "r") as f:
    plan = json.load(f)

def parse_github_url(url):
    m = re.match(r"https://raw\\.githubusercontent\\.com/([^/]+)/([^/]+)/([^/]+)/.+", url)
    if not m:
        return None, None, None
    owner, repo, ref = m.group(1), m.group(2), m.group(3)
    return owner, repo, ref

failed = False
for project in plan.get("Projects", []):
    pid = project.get("Id")
    path = project.get("Path")
    if not path:
        continue
    owner, repo, ref = parse_github_url(path)
    if not owner or not repo or not ref:
        print(f"Could not parse repo info from {path}")
        continue
    api_url = f"https://api.github.com/repos/{owner}/{repo}/releases/latest"
    r = requests.get(api_url)
    if r.status_code != 200:
        print(f"Could not fetch releases for {owner}/{repo}")
        continue
    latest_release = r.json().get("tag_name") or ""
    if latest_release and latest_release != ref:
        print(f"Project {pid} has later release {latest_release}")
        failed = True
if failed:
    sys.exit(1)
EOF
          python check_releases.py